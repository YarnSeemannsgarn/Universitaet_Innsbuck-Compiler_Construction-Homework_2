<program>			-> <program-heading> ; <program-block> .

<program-heading>		-> program <identifier>

<program-block>			-> <variable-declaration> <program-block-body> | <program-block-body>
<variable-declaration>		-> var <variable-id-list> : <type> | variable-declaration ; <variable-id-list> : <type>
<variable-id-list>		-> <identifier> | <variable-id-list>, <identifier>
<type>				-> <simple-type> | <array-type>
<simple-type>			-> integer | real
<array-type>			-> array [<array-index-definition>] of <type>
<array-index-definition>	-> <identifier> | <number>..<number>

<program-block-body>		-> begin <statement-list> end
<statement-list>		-> <statement> | <statement-list> <statement>
<statement>			-> <procedure-call> | <while-statement> | <if-statement> | <for-statment> | <variable-assignment> | <begin-end-statement> | ɛ

<procedure-call> 		-> read(<variable-list>); | write(<variable-list>);

<while-statement>		-> while <expression> do <statement>
<if-statement>			-> if <expression> then <statement> <else-part>
<else-part>			-> else <statement> | ɛ
<for-statement>			-> for <identifier> := <expression> to <expression> do <statement>
<variable-assignment>		-> <variable> := <expression>;
<begin-end-statement>		-> begin <statement-list> end;

<variable-list>			-> <variable> | <variable-list>, <variable>
<variable>			-> <identifier> | <identifier>[<expression>]
<identifier>			-> <small-letter> <rest-identifier>
<rest-identifier>		-> <digit-or-letter> <rest-identifier> | ɛ
<digit-or-letter>		-> <letter> | <digit>
<number>			-> <digit> | <number> <digit>
<digit>				-> 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0
<letter>			-> <small-letter> | <big-letter>
<small-letter>			-> a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z
<big-letter>			-> A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z

<expression>			-> <simple-expression> | <simple-expression> <relational-operator> <simple-expression>
<relational-operator>		-> = | <> | < | <= | >= | >
<simple-expression> 		-> <term> | <plus-or-minus> <term> | <simple-expression> <plus-or-minus> <term>
<term>				-> <factor> | <term> <multiplying-operator> <factor>
<plus-or-minus>			-> + | -
<multiplying-operator>		-> * | / | div | mod
<factor>			-> <variable> | <number> | (<simple-expression>)
